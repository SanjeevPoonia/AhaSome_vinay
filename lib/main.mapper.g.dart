// This file has been generated by the dart_json_mapper v2.2.5+1
// https://github.com/k-paxian/dart-json-mapper
// @dart = 2.12
import 'models/about_model.dart' as x3 show AboutModel, UserProfile;
import 'models/albums_model.dart' as x11 show AlbumModel, UserProfileImage, UserPost;
import 'models/all_friends_model.dart' as x6 show AllFriendsResponse, Friends;
import 'models/all_groups_model.dart' as x9 show AllGroupsModel, AllGroup;
import 'models/common_model.dart' as x1 show CommonModel;
import 'models/dashboard_model.dart' as x2 show DashboardModel, RandomQuestion, ShowPost, Userpost;
import 'models/find_friends_model.dart' as x4 show FindFriendsModel, FindFriend;
import 'models/friend_profile.dart' as x5 show FriendProfileModel, FriendPost, PostReply, PostLikes, FriendProfile;
import 'models/friend_requests.dart' as x7 show FriendRequests, PendingRequest;
import 'models/group_info_model.dart' as x10 show GroupInfoModel, GroupPost, PostLike, GroupInfo, UserPost, PostReply;
import 'models/login_response.dart' as x0 show LoginModel;
import 'models/shouts_model.dart' as x8 show ShoutModel, Shout;
import 'package:dart_json_mapper/dart_json_mapper.dart' show JsonMapper, JsonMapperAdapter, typeOf;
// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.


import 'dart:core';
import 'package:dart_json_mapper/src/model/annotations.dart' as prefix0;

// ignore_for_file: camel_case_types
// ignore_for_file: implementation_imports
// ignore_for_file: prefer_adjacent_string_concatenation
// ignore_for_file: prefer_collection_literals
// ignore_for_file: unnecessary_const

// ignore:unused_import
import 'package:reflectable/mirrors.dart' as m;
// ignore:unused_import
import 'package:reflectable/src/reflectable_builder_based.dart' as r;
// ignore:unused_import
import 'package:reflectable/reflectable.dart' as r show Reflectable;

final _data = <r.Reflectable, r.ReflectorData>{const prefix0.JsonSerializable(): r.ReflectorData(<m.TypeMirror>[], <m.DeclarationMirror>[], <m.ParameterMirror>[], <Type>[], 0, {}, {}, null, [])};


final _memberSymbolMap = null;

void _initializeReflectable(JsonMapperAdapter adapter) {
  if (!adapter.isGenerated) {
    return;
  }
  r.data = adapter.reflectableData!;
  r.memberSymbolMap = adapter.memberSymbolMap;
}

final mainGeneratedAdapter = JsonMapperAdapter(
  title: 'aha_project_files',
  url: 'package:aha_project_files/main.dart',
  reflectableData: _data,
  memberSymbolMap: _memberSymbolMap,
  valueDecorators: {
    typeOf<List<x0.LoginModel>>(): (value) => value.cast<x0.LoginModel>(),
    typeOf<Set<x0.LoginModel>>(): (value) => value.cast<x0.LoginModel>(),
    typeOf<List<x1.CommonModel>>(): (value) => value.cast<x1.CommonModel>(),
    typeOf<Set<x1.CommonModel>>(): (value) => value.cast<x1.CommonModel>(),
    typeOf<List<x2.DashboardModel>>(): (value) => value.cast<x2.DashboardModel>(),
    typeOf<Set<x2.DashboardModel>>(): (value) => value.cast<x2.DashboardModel>(),
    typeOf<List<x2.RandomQuestion>>(): (value) => value.cast<x2.RandomQuestion>(),
    typeOf<Set<x2.RandomQuestion>>(): (value) => value.cast<x2.RandomQuestion>(),
    typeOf<List<x2.ShowPost>>(): (value) => value.cast<x2.ShowPost>(),
    typeOf<Set<x2.ShowPost>>(): (value) => value.cast<x2.ShowPost>(),
    typeOf<List<x2.Userpost>>(): (value) => value.cast<x2.Userpost>(),
    typeOf<Set<x2.Userpost>>(): (value) => value.cast<x2.Userpost>(),
    typeOf<List<x3.AboutModel>>(): (value) => value.cast<x3.AboutModel>(),
    typeOf<Set<x3.AboutModel>>(): (value) => value.cast<x3.AboutModel>(),
    typeOf<List<x3.UserProfile>>(): (value) => value.cast<x3.UserProfile>(),
    typeOf<Set<x3.UserProfile>>(): (value) => value.cast<x3.UserProfile>(),
    typeOf<List<x4.FindFriendsModel>>(): (value) => value.cast<x4.FindFriendsModel>(),
    typeOf<Set<x4.FindFriendsModel>>(): (value) => value.cast<x4.FindFriendsModel>(),
    typeOf<List<x4.FindFriend>>(): (value) => value.cast<x4.FindFriend>(),
    typeOf<Set<x4.FindFriend>>(): (value) => value.cast<x4.FindFriend>(),
    typeOf<List<x5.FriendProfileModel>>(): (value) => value.cast<x5.FriendProfileModel>(),
    typeOf<Set<x5.FriendProfileModel>>(): (value) => value.cast<x5.FriendProfileModel>(),
    typeOf<List<x5.FriendPost>>(): (value) => value.cast<x5.FriendPost>(),
    typeOf<Set<x5.FriendPost>>(): (value) => value.cast<x5.FriendPost>(),
    typeOf<List<x5.PostReply>>(): (value) => value.cast<x5.PostReply>(),
    typeOf<Set<x5.PostReply>>(): (value) => value.cast<x5.PostReply>(),
    typeOf<List<x5.PostLikes>>(): (value) => value.cast<x5.PostLikes>(),
    typeOf<Set<x5.PostLikes>>(): (value) => value.cast<x5.PostLikes>(),
    typeOf<List<x5.FriendProfile>>(): (value) => value.cast<x5.FriendProfile>(),
    typeOf<Set<x5.FriendProfile>>(): (value) => value.cast<x5.FriendProfile>(),
    typeOf<List<x6.AllFriendsResponse>>(): (value) => value.cast<x6.AllFriendsResponse>(),
    typeOf<Set<x6.AllFriendsResponse>>(): (value) => value.cast<x6.AllFriendsResponse>(),
    typeOf<List<x6.Friends>>(): (value) => value.cast<x6.Friends>(),
    typeOf<Set<x6.Friends>>(): (value) => value.cast<x6.Friends>(),
    typeOf<List<x7.FriendRequests>>(): (value) => value.cast<x7.FriendRequests>(),
    typeOf<Set<x7.FriendRequests>>(): (value) => value.cast<x7.FriendRequests>(),
    typeOf<List<x7.PendingRequest>>(): (value) => value.cast<x7.PendingRequest>(),
    typeOf<Set<x7.PendingRequest>>(): (value) => value.cast<x7.PendingRequest>(),
    typeOf<List<x8.ShoutModel>>(): (value) => value.cast<x8.ShoutModel>(),
    typeOf<Set<x8.ShoutModel>>(): (value) => value.cast<x8.ShoutModel>(),
    typeOf<List<x8.Shout>>(): (value) => value.cast<x8.Shout>(),
    typeOf<Set<x8.Shout>>(): (value) => value.cast<x8.Shout>(),
    typeOf<List<x9.AllGroupsModel>>(): (value) => value.cast<x9.AllGroupsModel>(),
    typeOf<Set<x9.AllGroupsModel>>(): (value) => value.cast<x9.AllGroupsModel>(),
    typeOf<List<x9.AllGroup>>(): (value) => value.cast<x9.AllGroup>(),
    typeOf<Set<x9.AllGroup>>(): (value) => value.cast<x9.AllGroup>(),
    typeOf<List<x10.GroupInfoModel>>(): (value) => value.cast<x10.GroupInfoModel>(),
    typeOf<Set<x10.GroupInfoModel>>(): (value) => value.cast<x10.GroupInfoModel>(),
    typeOf<List<x10.GroupPost>>(): (value) => value.cast<x10.GroupPost>(),
    typeOf<Set<x10.GroupPost>>(): (value) => value.cast<x10.GroupPost>(),
    typeOf<List<x10.PostLike>>(): (value) => value.cast<x10.PostLike>(),
    typeOf<Set<x10.PostLike>>(): (value) => value.cast<x10.PostLike>(),
    typeOf<List<x10.GroupInfo>>(): (value) => value.cast<x10.GroupInfo>(),
    typeOf<Set<x10.GroupInfo>>(): (value) => value.cast<x10.GroupInfo>(),
    typeOf<List<x10.UserPost>>(): (value) => value.cast<x10.UserPost>(),
    typeOf<Set<x10.UserPost>>(): (value) => value.cast<x10.UserPost>(),
    typeOf<List<x10.PostReply>>(): (value) => value.cast<x10.PostReply>(),
    typeOf<Set<x10.PostReply>>(): (value) => value.cast<x10.PostReply>(),
    typeOf<List<x11.AlbumModel>>(): (value) => value.cast<x11.AlbumModel>(),
    typeOf<Set<x11.AlbumModel>>(): (value) => value.cast<x11.AlbumModel>(),
    typeOf<List<x11.UserProfileImage>>(): (value) => value.cast<x11.UserProfileImage>(),
    typeOf<Set<x11.UserProfileImage>>(): (value) => value.cast<x11.UserProfileImage>(),
    typeOf<List<x11.UserPost>>(): (value) => value.cast<x11.UserPost>(),
    typeOf<Set<x11.UserPost>>(): (value) => value.cast<x11.UserPost>()
},
  enumValues: {

});

Future<JsonMapper> initializeJsonMapperAsync({Iterable<JsonMapperAdapter> adapters = const []}) => Future(() => initializeJsonMapper(adapters: adapters));

JsonMapper initializeJsonMapper({Iterable<JsonMapperAdapter> adapters = const []}) {
  JsonMapper.enumerateAdapters([...adapters, mainGeneratedAdapter], (JsonMapperAdapter adapter) {
    _initializeReflectable(adapter);
    JsonMapper().useAdapter(adapter);
  });
  return JsonMapper();
}